{"version":3,"file":"component---src-pages-resources-index-tsx-f717c7579f37c2297972.js","mappings":"2KA+DA,MArDiCA,IAK3B,IAL4B,MAChCC,EAAK,MACLC,EAAK,YACLC,EAAW,cACXC,GACD,EACC,MACEH,MAAOI,EACPF,YAAaG,EACbJ,MAAOK,EAAY,QACnBC,EAAO,gBACPC,IClBWC,EAAAA,EAAAA,gBAAe,cAahBC,KAAKC,aDQXC,EAAYZ,EAAWA,EAAK,MAAMI,EAAiBA,EACnDS,EAAgBN,EAAUJ,EAE1BW,EAAWP,GAAWN,GAASK,GAErC,OACES,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAAAA,QAAAA,KAAQH,GAERG,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,QAAQC,QAASH,IAE3BX,EACCY,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAAAA,OAAAA,CAAMG,IAAI,YAAYC,KAAMN,IAC5BE,EAAAA,cAAAA,OAAAA,CAAMK,SAAS,SAASH,QAASJ,KAGnCE,EAAAA,cAAAA,EAAAA,SAAAA,MAEFA,EAAAA,cAAAA,OAAAA,CAAMK,SAAS,UAAUH,QAAQ,YACjCF,EAAAA,cAAAA,OAAAA,CAAMK,SAAS,WAAWH,QAASL,IACnCG,EAAAA,cAAAA,OAAAA,CACEK,SAAS,iBACTH,QAASf,GAAeG,IAE1BU,EAAAA,cAAAA,OAAAA,CAAMK,SAAS,WAAWH,QAASH,IAEnCC,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,eAAeC,QAAQ,wBAClCF,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,gBAAgBC,QAASL,IACpCG,EAAAA,cAAAA,OAAAA,CACEC,KAAK,sBACLC,QAASf,GAAeG,IAE1BU,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,gBAAgBC,QAASH,IACpCC,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,kBAAkBC,QAAST,IACrC,C,6GEtDP,MAgDaa,EAAOA,IAAMN,EAAAA,cAACO,EAAAA,EAAG,CAACtB,MAAM,cAErC,UAlDsBD,IAAkD,IAAjD,KAACwB,GAA2C,EACjE,OACER,EAAAA,cAACS,EAAAA,EAAM,KACLT,EAAAA,cAAAA,KAAAA,KAAI,aACJA,EAAAA,cAAAA,IAAAA,KAAAA,mWAOCQ,EAAKE,OAAOC,MAAMC,KAAIC,IAAQ,UAC7B,MAAMC,EAAO,eAA8B,QAAjC,EAAiBD,EAAKE,mBAAW,aAAhBC,EAAkBC,MAC7C,OACEjB,EAAAA,cAAAA,UAAAA,CAASkB,IAAKL,EAAKM,IACjBnB,EAAAA,cAAAA,KAAAA,KACEA,EAAAA,cAACoB,EAAAA,KAAI,CAACC,GAAIP,GAAuB,QAAlB,EAAED,EAAKE,mBAAW,aAAhBO,EAAkBrC,QAErCe,EAAAA,cAAAA,IAAAA,KACEA,EAAAA,cAAAA,KAAAA,KAAI,aAA2B,QAAjB,EAACa,EAAKE,mBAAW,aAAhBQ,EAAkBC,UAEnCxB,EAAAA,cAAAA,IAAAA,KACGa,EAAKY,QACNzB,EAAAA,cAACoB,EAAAA,KAAI,CAACC,GAAIP,GAAM,cAEV,IAGP,C","sources":["webpack://tiffatiel-art/./src/components/Seo.tsx","webpack://tiffatiel-art/./src/hooks/useSiteMetadata.tsx","webpack://tiffatiel-art/./src/pages/resources/index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport {useSiteMetadata} from \"../hooks/useSiteMetadata\";\n\ninterface PropTypes {\n  title?: string | null;\n  image?: string | null;\n  description?: string | null;\n  canonicalPath?: string | null;\n}\n\nconst Seo: React.FC<PropTypes> = ({\n  title,\n  image,\n  description,\n  canonicalPath,\n}) => {\n  const {\n    title: defaultTitle,\n    description: defaultDescription,\n    image: defaultImage,\n    siteUrl,\n    twitterUsername,\n  } = useSiteMetadata();\n\n  const titleText = title ? `${title} | ${defaultTitle}` : defaultTitle;\n  const canonicalLink = siteUrl + canonicalPath;\n\n  const imageUrl = siteUrl + (image || defaultImage);\n\n  return (\n    <>\n      <title>{titleText}</title>\n\n      <meta name=\"image\" content={imageUrl} />\n\n      {canonicalPath ? (\n        <>\n          <link rel=\"canonical\" href={canonicalLink} />\n          <meta property=\"og:url\" content={canonicalLink} />\n        </>\n      ) : (\n        <></>\n      )}\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:title\" content={titleText} />\n      <meta\n        property=\"og:description\"\n        content={description || defaultDescription}\n      />\n      <meta property=\"og:image\" content={imageUrl} />\n\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={titleText} />\n      <meta\n        name=\"twitter:description\"\n        content={description || defaultDescription}\n      />\n      <meta name=\"twitter:image\" content={imageUrl} />\n      <meta name=\"twitter:creator\" content={twitterUsername} />\n    </>\n  );\n};\n\nexport default Seo;\n","import {graphql, useStaticQuery} from \"gatsby\";\n\nexport const useSiteMetadata = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          description\n          image\n          siteUrl\n        }\n      }\n    }\n  `);\n\n  return data.site.siteMetadata;\n};\n","import * as React from \"react\";\nimport {graphql, Link, PageProps} from \"gatsby\";\nimport Layout from \"../../components/Layout\";\nimport Seo from \"../../components/Seo\";\n\nconst ResourcesPage = ({data}: PageProps<Queries.AllResourcesQuery>) => {\n  return (\n    <Layout>\n      <h1>Resources</h1>\n      <p>\n        {`I get a lot of joy out of helping others be creative and have fun.\n        I enjoy looking for ways to share things I've learned or things that\n        have helped me on my creative journey. On this page, I collect the\n        different resources I've created. If you find any of the things I've\n        created helpful, I'd love to hear from you!`}\n      </p>\n      {data.allMdx.nodes.map(node => {\n        const link = `/resources/${node.frontmatter?.slug}`;\n        return (\n          <article key={node.id}>\n            <h2>\n              <Link to={link}>{node.frontmatter?.title}</Link>\n            </h2>\n            <p>\n              <em>Published {node.frontmatter?.created}</em>\n            </p>\n            <p>\n              {node.excerpt}\n              <Link to={link}>Read more</Link>\n            </p>\n          </article>\n        );\n      })}\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query AllResources {\n    allMdx(sort: {frontmatter: {created: DESC}}) {\n      nodes {\n        frontmatter {\n          created\n          title\n          slug\n        }\n        excerpt\n        id\n      }\n    }\n  }\n`;\n\nexport const Head = () => <Seo title=\"Resources\" />;\n\nexport default ResourcesPage;\n"],"names":["_ref","title","image","description","canonicalPath","defaultTitle","defaultDescription","defaultImage","siteUrl","twitterUsername","useStaticQuery","site","siteMetadata","titleText","canonicalLink","imageUrl","React","name","content","rel","href","property","Head","Seo","data","Layout","allMdx","nodes","map","node","link","frontmatter","_node$frontmatter","slug","key","id","Link","to","_node$frontmatter2","_node$frontmatter3","created","excerpt"],"sourceRoot":""}